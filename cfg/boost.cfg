<?xml version="1.0"?>
<def format="2">
  <function name="boost::algorithm::join">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1">
      <not-uninit/>
      <not-null/>
    </arg>
    <arg nr="2">
      <not-uninit/>
      <not-null/>
    </arg>
  </function>
  <!-- https://www.boost.org/doc/libs/master/libs/config/doc/html/boost_config/boost_macro_reference.html -->
  <define name="BOOST_FORCEINLINE" value="inline"/>
  <define name="BOOST_NOINLINE" value=""/>
  <define name="BOOST_NORETURN" value="[[noreturn]]"/>
  <define name="BOOST_LIKELY(X)" value="(X)"/>
  <define name="BOOST_UNLIKELY(X)" value="(X)"/>
  <define name="BOOST_FIXTURE_TEST_SUITE(suite_name, fixture_name)" value=""/>
  <define name="BOOST_FIXTURE_TEST_SUITE_END()" value=""/>
  <define name="BOOST_TEST_GLOBAL_FIXTURE(name)" value=""/>
  <define name="BOOST_PYTHON_FUNCTION_OVERLOADS(foo_overloads, foo, x, y)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE(X)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE_END()" value=""/>
  <define name="BOOST_TEST(condition)" value="assert(condition)"/>
  <define name="BOOST_WARN(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK(condition)" value="assert(condition)"/>
  <define name="BOOST_REQUIRE(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_WARN_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_REQUIRE_EQUAL(a,b)" value="assert((a) == (b))"/>
</def>
